# -*- coding: utf-8 -*-
from collections import Counter
import re

cipher = r"""ЯЖЫРЪИХВПЫЪХЫЫХЛХ,ЪГЫХЪFIDONETЪЦХУОСЭСЮСЦРЪБСБЪКПБХИИПМГПЦБСЙЪЦПЫР,ЪХКСЪАИППЫЪАПМСМЬАГПЦБЕФЪОМПЭХЭАОКЕФЪЦЫМЕБЫЕМЕ.ЪЦЫМЕБЫЕМСЪЦПЫАЪХТМПОПЮЙПЫЪТМСЭАЮСЪТПМПОСГАЪТХГЫЖЪИПВОЕЪЦЫСКЧАЙИА,ЪТХОГАКПККХЦЫРЪЕУЮХЭ,ЪСЪЫСБВПЪЮФОПЩ,ЪХЫЭПЫЦЫЭПККЖЬЪУСЪЭЖТХЮКПКАПЪЦПЫРФЪЫПЬЪАЮАЪАКЖЬЪ_ЕКБЧАЩЪ(БХХМОАКСЫХМХЭ).ЪХЦКХЭКЖИЪОХБЕИПКЫХИ,ЪХТАЦЖЭСФЗАИЪЦЫМЕБЫЕМЕЪFIDONETЪЙЭЮЙПЫЦЙЪЦТАЦХБЪЕУЮХЭЪЦПЫАЪ(КХОЮАЦЫ,ЪКХОПЮАЦЫ,ЪХЫЪСКЛЮ.ЪNODELIST).ЪЦЕЗПЦЫЭЕПЫЪКПЦБХЮРБХЪЫСБАЬЪЦТАЦБХЭЪ-ЪЛЮХЯСЮРКЖЩЪЦТАЦХБ,ЪКСУЖЭСПИЖЩЪХЯЖГКХЪИАМХЭЖИЪКХОЮАЦЫХИ,ЪСЪЫСБВПЪИПКППЪБМЕТКЖПЪЦТАЦБАЪТХЪХЫОПЮРКЖИЪЛПХЛМС_АГПЦБАИЪМПЛАХКСИ.ЪИАМХЭХЩЪКХОЮАЦЫЪЦХОПМВАЫЪЦПЫПЭЖПЪСОМПЦС,ЪЫПЮП_ХКЖ,ЪАИПКСЪХТПМСЫХМХЭЪАЪКСУЭСКАЙЪЦЫСКЧАЩЪОЮЙЪЭЦПЬЪЕУЮХЭЪFIDONET.ЪХКЪЦХЦЫСЭЮПКЪАУЪКПЦБХЮРБАЬЪЦПЛИПКЫХЭ,ЪУСЪЦХЦЫСЭЮПКАПЪБХЫХМЖЬЪХЫЭПГСФЫЪБХХМОАКСЫХМЖЪИПКППЪБМЕТКЖЬЪПОАКАЧЪЦПЫА.ЪХ_АЧАСЮРКХПЪАУОСКАПЪКХОПЮАЦЫСЪЭЖЬХОАЫЪОЭСЪМСУСЪЭЪЛХО,ЪЭЦПЪХЦЫСЮРКХПЪЭМПИЙЪАУИПКПКАЙЪЭЪЦЫМЕБЫЕМПЪЦПЫАЪ_АБЦАМЕФЫЦЙЪЭЪ_СЩЮСЬЪАУИПКПКАЩ(КХОПОА__СЬ,ЪОА_СЬ,ЪNODEDIFF),ЪБХЫХМЖПЪТМАЪТХИХЗАЪЦТПЧАСЮРКЖЬЪТМХЛМСИИ
ЭКХЦЙЫЦЙЪЭЪКХОЮАЦЫЪБСВОХЩЪЦЫСКЧАПЩЪЦСИХЦЫХЙЫПЮРКХ.ЪЦСИХЩЪБМЕТКХЩЪПОАКАЧПЩЪОПЮПКАЙЪFIDONETЪЙЭЮЙПЫЦЙЪУХКСЪ(ZONE).ЪМХЦЦАЙЪЭЬХОАЫЪЭХЪЭЫХМЕФЪУХКЕЪ(ПЭМХТСЪАЪЫ.О.),ЪЦДСЪКСЬХОЙЫЦЙЪЭЪТПМЭХЩЪУХКП.ЪТХОМХЯКХПЪХТАЦСКАПЪКХИПМХЭЪУХКЪЭЖЪИХВПЫПЪКСЩЫАЪЭЪИАМХЭХИЪКХОЮАЦЫП.ЪУХКСЪАИППЫЪЦЭХПЛХ
БХХМОАКСЫХМСЪ(ZONEЪCOORDINATOR,ЪZC),ЪБХХМОАКСЫХМСЪТХЪЭХТМХЦСИЪШЬХБХК_ПМПКЧАЩЪ(ZONEЪECHOMAILЪCOORDINATOR,ЪZEC)ЪАЪЫ.О.ЪУХКСЪБСБЪТМСЭАЮХЪАИППЫЪЦХЯЦЫЭПККЖПЪЭХМХЫСЪ(ЛПЩЫЖ,ЪGATE)ЪОЮЙЪХЫТМСЭБА
ТХГЫЖЪОМЕЛАИЪУХКСИЪЦПЫА.ЪБСВОСЙЪУХКСЪАИППЫЪЦЭХЩЪЦТАЦХБЪЕУЮХЭ,ЪЭБЮФГСПИЖЩЪЭЪИАМХЭХЩЪКХОЮАЦЫЪБСБЪХОАКЪАУЪЦПЛИПКЫХЭ.ЪЦТАЦХБЪЕУЮХЭЪУХКЖЪ2ЪЭЪКСЦЫХЙЗАЩЪИХИПКЫЪАИПКЕПЫЦЙЪZ2-LIST.Ъ_СЩЮЖЪАУИПКПКАЩЪБЪКХОЮАЦЫЕЪУХКЖЪ2ЪКСУЖЭСФЫЦЙЪZ2-DIFF.ЪМСЦДАМПКАЙЪ_СЩЮХЭЪZ2-DIFFЪГАЦЮХЭЖПЪАЪЬСМСБЫПМАУЕФЫЪКХИПМЪЫПБЕЗПЛХЪОКЙЪ(Ы.П.ЪОКЙ,ЪБХЛОСЪШЫХЫЪ_СЩЮЪЦХУОСКЪБХХМОАКСЫХМХИ.)ЪХЫЪКСГСЮСЪЛХОС.ЪТХЦБХЮРБЕЪКХОЮАЦЫЪЭПЦРИСЪЭПЮАБ,ЪХКЪХЯЖГКХЪТПМПЦЖЮСПЫЦЙЪЭЪСМЬАЭАМХЭСККХИЪЭАОП.ЪЭЪЫСБХИЪЦЮЕГСП
ЫМПЯЕПЫЦЙЪХЫЮАГСЫРЪЕТСБХЭСККЖЩЪЮАЦЫЪХЫЪКПЕТСБХЭСККХЛХ,ЪГЫХЯЖЪЦЮЕГСЩКХЪКПЪТХТМХЯХЭСЫРЪЦБХИТАЮАМХЭСЫРЪЕТСБХЭСККЖЩЪЭСМАСКЫ.ЪОЮЙЪШЫХЛХЪАЦТХЮРУЕПЫЦЙЪОМЕЛХПЪМСЦДАМПКАПЪ_СЩЮСЪ(.ZXX)ЪЛОПЪXXЪТХЦЮПОКАПЪЧА_МЖЪКХИПМСЪОКЙ.ЪЦЮПОЕФЗПЩЪПОАКАЧПЩЪОПЮПКАЙЪЦПЫАЪЙЭЮЙПЫЦЙЪМПЛАХКЪ(REGION).ЪМХЦЦАЙЪКСЬХОАЫЦЙЪЭЪМПЛАХКПЪ50Ъ(ХЯХУКСГСПЫЦЙЪХЯЖГКХЪБСБЪR50).ЪМПЛАХКЪХЫМСВСПЫЦЙЪЭЪЦПЫПЭХИЪСОМПЦП,ЪХОКСБХ,ЪЭЪХЫЮАГАПЪХЫЪУХКЖЪАЪТМХГАЬЪПОАКАЧЪОПЮПКАЙ,ЪКПЪЭЬХОАЫЪЭЪСОМПЦЪБСБЪЦСИХЦЫХЙЫПЮРКСЙЪЭПЮАГАКС.ЪБСВОЖЩЪМПЛАХКЪАИППЫЪЦЭХАЬЪБХХМОАКСЫХМХЭЪАЪЦЭХЩЪЦПЛИПКЫЪУХКХЭХЛХЪКХОЮАЦЫС,ЪБХЫХМЖЩЪЭПОПЫЪМПЛАХКСЮРКЖЩЪБХХМОАКСЫХМЪ(RC,ЪREGIONALЪCOORDINATOR,ЪR50CЪЭЪЦЮЕГСПЪМХЦЦАА).ЪТХИАИХЪRCЪАИППЫЦЙЪПЗПЪRECЪ(REGIONALЪECHOMAILЪCOORDINATOR)ЪАЪОМЕЛАПЪБХХМОАКСЫХМЖ.ЪЯСУХЭХЩЪПОАКАЧПЩЪЫПММАЫХМАСЮРКХЛХЪОПЮПКАЙЪFIDONETЪЙЭЮЙПЫЦЙЪЦПЫРЪ(NET).ЪЦПЫРЪЬСМСБЫПМАУЕПЫЦЙЪЕКАБСЮРКЖИЪКХИПМХИЪЭКЕЫМАЪУХКЖ,ЪАЪЦХОПМВАЫЪЭЪЦПЯПЪКХИПМЪЫХЛХЪМПЛАХКС,ЪБЪБХЫХМХИЕЪЦПЫРЪТМАКСОЮПВАЫ.ЪHХИПМЪЦПЫАЪЭЬХОАЫЪЭЪЦПЫПЭХЩЪСОМПЦЪЭЪБСГПЦЫЭПЪЦСИХЦЫХЙЫПЮРКХЛХЪТХЮЙ,ЪЭЪЫХЪЭМПИЙЪБСБЪКХИПМЪМПЛАХКСЪХЯМСУЕФЫ
ТПМЭЖПЪОЭПЪЧА_МЖЪКХИПМСЪЦПЫАЪ(ОЮЙЪМПЛАХКСЪ50ЪЭЦПЪЦПЫАЪАИПФЫЪКХИПМСЪ50XX).ЪЪЦПЫРЪЫСБВПЪАИППЫЪЦЭХПЛХЪБХХМОАКСЫХМСЪ(NC,ЪNETWORKЪCOORDINATOR)ЪАЪБХХМОАКСЫХМСЪТХЪЭХТМХЦСИЪШЬХТХГЫЖЪ(NEC,ЪNETWORKЪECHOMAILЪCOORDINATOR).ЪЦПЫРЪАИППЫЪЦЭХЩЪЦПЛИПКЫЪЭЪКХОЮАЦЫПЪМПЛАХКС,ЪА,ЪБМХИПЪЫХЛХ,ЪЦТАЦХБЪСЯХКПКЫХЭЪЦПЫАЪ(ТХАКЫХЭ,ЪЫХГПБ,ЪХЫЪСКЛЮ.ЪPOINT),ЪКСУЖЭСПИЖЩЪХЯЖГКХЪТХАКЫЮАЦЫХИ.Ъ"""

plaintext = r"""Быть может оттого, что FIDONet создавалась как некоммерческая сеть, она имеет иерархическую древовидную структуру. Структура сети определяет правила передачи почты между станциями, подчиненность узлов, а также людей, ответственных за выполнение сетью тех или иных функций (координаторов). Основным документом, описывающим структуру FIDONet является список узлов сети (нодлист, ноделист, от англ. nodelist). Существует несколько таких списков - глобальный список, называемый обычно мировым нодлистом, а также менее крупные списки по отдельным географическим регионам. Мировой нодлист содержит сетевые адреса, телефоны, имена операторов и названия станций для всех узлов FIDONet. Он составлен из нескольких сегментов, за составление которых отвечают координаторы менее крупных единиц сети. Официальное издание ноделиста выходит два раза в год, все остальное время изменения в структуре сети фиксируются в файлах изменений(нодедиффах, дифах, nodediff), которые при помощи специальных программ
вносятся в нодлист каждой станцией самостоятельно. Самой крупной единицей деления FIDONet является зона (Zone). Россия входит во вторую зону (Европа и т.д.), США находятся в первой зоне. Подробное описание номеров зон Вы можете найти в мировом нодлисте. Зона имеет своего
координатора (Zone Coordinator, ZC), координатора по вопросам эхоконференций (Zone EchoMail Coordinator, ZEC) и т.д. Зона как правило имеет собственные ворота (гейты, gate) для отправки
почты другим зонам сети. Каждая зона имеет свой список узлов, включаемый в мировой нодлист как один из сегментов. Список узлов зоны 2 в настоящий момент именуется Z2-LIST. Файлы изменений к нодлисту зоны 2 называются Z2-DIFF. Расширения файлов Z2-DIFF числовые и характеризуют номер текущего дня (т.е. дня, когда этот файл создан координатором.) от начала года. Поскольку нодлист весьма велик, он обычно пересылается в архивированном виде. В таком случае
требуется отличать упакованный лист от неупакованного, чтобы случайно не попробовать скомпилировать упакованный вариант. Для этого используется другое расширение файла (.Zxx) где xx последние цифры номера дня. Следующей единицей деления сети является регион (Region). Россия находится в регионе 50 (обозначается обычно как R50). Регион отражается в сетевом адресе, однако, в отличие от зоны и прочих единиц деления, не входит в адрес как самостоятельная величина. Каждый регион имеет своих координаторов и свой сегмент зонового нодлиста, который ведет региональный координатор (RC, Regional Coordinator, R50C в случае России). Помимо RC имеется еще REC (Regional EchoMail Coordinator) и другие координаторы. Базовой единицей территориального деления FIDONet является сеть (Net). Сеть характеризуется уникальным номером внутри зоны, и содержит в себе номер того региона, к которому сеть принадлежит. Hомер сети входит в сетевой адрес в качестве самостоятельного поля, в то время как номер региона образуют
первые две цифры номера сети (для региона 50 все сети имеют номера 50xx).  Сеть также имеет своего координатора (NC, Network Coordinator) и координатора по вопросам эхопочты (NEC, Network EchoMail Coordinator). Сеть имеет свой сегмент в нодлисте региона, и, кроме того, список абонентов сети (поинтов, точек, от англ. point), называемый обычно поинтлистом. """

# ---- фильтры ----
# символы-исключения, которые НЕ заменяются в шифре по условию
EXCLUDE_CHARS = set('(),')  # скобки и запятые в условии
# мы также не включаем английские буквы (в шифротексте они не заменяются)
is_english = lambda ch: bool(re.match(r'[A-Za-z]', ch))

# Собираем статистику по символам шифротекста, исключая явные скобки/запятые и английские буквы
chars = [c for c in cipher if not (c in EXCLUDE_CHARS or is_english(c))]
counts = Counter(chars)

# Удалим символ перевода строки из алфавита для удобства (если нужно — можно оставить)
counts.pop('\n', None)

# Выведем результаты
print("Уникальных символов в шифротексте (без скобок/запятых и английских букв):", len(counts))
print()
print("Символы и их частоты (по убыванию):")
for ch, cnt in counts.most_common():
    # показываем вид символа через repr, чтобы было видно пробелы/редкие символы
    print(f"{repr(ch):6}  : {cnt}")

# Найдём, какие символы шифротекста стоят на позициях, где в plaintext пробелы.
minlen = min(len(cipher), len(plaintext))
space_cipher_symbols = set()
english_in_cipher_positions = []
for i in range(minlen):
    p = plaintext[i]
    c = cipher[i]
    if p == ' ':
        space_cipher_symbols.add(c)
    if re.match(r'[A-Za-z]', p):
        english_in_cipher_positions.append((i, c, p))

print("\nСимвол(ы) в шифротексте, соответствующие пробелам plaintext (ожидаемо — символ(ы) разделителя):")
print(space_cipher_symbols)

print("\nПозиции, где plaintext содержит английскую букву (англ. буквы в шифротексте не заменены):")
for pos, c, p in english_in_cipher_positions[:30]:
    print(f"pos={pos:4}  cipher={repr(c):6}  plaintext={p}")

# Сформируем "алфавит" шифротекста (список символов, которые заменяют русские буквы + пробел)
alphabet = sorted(counts.keys(), key=lambda x: (-counts[x], x))
print("\n--- Алфавит шифротекста (от наиболее частого к наименее частому) ---")
print("".join(alphabet))

# Сохраним в файл (по желанию)
with open("cipher_alphabet.txt", "w", encoding="utf-8") as f:
    f.write("".join(alphabet))
print("\nАлфавит также сохранён в файл cipher_alphabet.txt")
